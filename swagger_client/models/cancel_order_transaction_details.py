# coding: utf-8

"""
    GeniusYield DEX Server API

    API to interact with GeniusYield DEX.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@geniusyield.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CancelOrderTransactionDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction': 'GYTx',
        'transaction_fee': 'int',
        'transaction_id': 'GYTxId'
    }

    attribute_map = {
        'transaction': 'transaction',
        'transaction_fee': 'transaction_fee',
        'transaction_id': 'transaction_id'
    }

    def __init__(self, transaction=None, transaction_fee=None, transaction_id=None, _configuration=None):  # noqa: E501
        """CancelOrderTransactionDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._transaction = None
        self._transaction_fee = None
        self._transaction_id = None
        self.discriminator = None

        self.transaction = transaction
        self.transaction_fee = transaction_fee
        self.transaction_id = transaction_id

    @property
    def transaction(self):
        """Gets the transaction of this CancelOrderTransactionDetails.  # noqa: E501


        :return: The transaction of this CancelOrderTransactionDetails.  # noqa: E501
        :rtype: GYTx
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this CancelOrderTransactionDetails.


        :param transaction: The transaction of this CancelOrderTransactionDetails.  # noqa: E501
        :type: GYTx
        """
        if self._configuration.client_side_validation and transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")  # noqa: E501

        self._transaction = transaction

    @property
    def transaction_fee(self):
        """Gets the transaction_fee of this CancelOrderTransactionDetails.  # noqa: E501


        :return: The transaction_fee of this CancelOrderTransactionDetails.  # noqa: E501
        :rtype: int
        """
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, transaction_fee):
        """Sets the transaction_fee of this CancelOrderTransactionDetails.


        :param transaction_fee: The transaction_fee of this CancelOrderTransactionDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and transaction_fee is None:
            raise ValueError("Invalid value for `transaction_fee`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                transaction_fee is not None and transaction_fee < 0):  # noqa: E501
            raise ValueError("Invalid value for `transaction_fee`, must be a value greater than or equal to `0`")  # noqa: E501

        self._transaction_fee = transaction_fee

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CancelOrderTransactionDetails.  # noqa: E501


        :return: The transaction_id of this CancelOrderTransactionDetails.  # noqa: E501
        :rtype: GYTxId
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CancelOrderTransactionDetails.


        :param transaction_id: The transaction_id of this CancelOrderTransactionDetails.  # noqa: E501
        :type: GYTxId
        """
        if self._configuration.client_side_validation and transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CancelOrderTransactionDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CancelOrderTransactionDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CancelOrderTransactionDetails):
            return True

        return self.to_dict() != other.to_dict()
