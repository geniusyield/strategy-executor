# coding: utf-8

"""
    GeniusYield DEX Server API

    API to interact with GeniusYield DEX.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@geniusyield.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TradingFees(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flat_maker_fee': 'GYNatural',
        'flat_taker_fee': 'GYNatural',
        'percentage_maker_fee': 'str',
        'percentage_taker_fee': 'str'
    }

    attribute_map = {
        'flat_maker_fee': 'flat_maker_fee',
        'flat_taker_fee': 'flat_taker_fee',
        'percentage_maker_fee': 'percentage_maker_fee',
        'percentage_taker_fee': 'percentage_taker_fee'
    }

    def __init__(self, flat_maker_fee=None, flat_taker_fee=None, percentage_maker_fee=None, percentage_taker_fee=None, _configuration=None):  # noqa: E501
        """TradingFees - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._flat_maker_fee = None
        self._flat_taker_fee = None
        self._percentage_maker_fee = None
        self._percentage_taker_fee = None
        self.discriminator = None

        self.flat_maker_fee = flat_maker_fee
        self.flat_taker_fee = flat_taker_fee
        self.percentage_maker_fee = percentage_maker_fee
        self.percentage_taker_fee = percentage_taker_fee

    @property
    def flat_maker_fee(self):
        """Gets the flat_maker_fee of this TradingFees.  # noqa: E501


        :return: The flat_maker_fee of this TradingFees.  # noqa: E501
        :rtype: GYNatural
        """
        return self._flat_maker_fee

    @flat_maker_fee.setter
    def flat_maker_fee(self, flat_maker_fee):
        """Sets the flat_maker_fee of this TradingFees.


        :param flat_maker_fee: The flat_maker_fee of this TradingFees.  # noqa: E501
        :type: GYNatural
        """
        if self._configuration.client_side_validation and flat_maker_fee is None:
            raise ValueError("Invalid value for `flat_maker_fee`, must not be `None`")  # noqa: E501

        self._flat_maker_fee = flat_maker_fee

    @property
    def flat_taker_fee(self):
        """Gets the flat_taker_fee of this TradingFees.  # noqa: E501


        :return: The flat_taker_fee of this TradingFees.  # noqa: E501
        :rtype: GYNatural
        """
        return self._flat_taker_fee

    @flat_taker_fee.setter
    def flat_taker_fee(self, flat_taker_fee):
        """Sets the flat_taker_fee of this TradingFees.


        :param flat_taker_fee: The flat_taker_fee of this TradingFees.  # noqa: E501
        :type: GYNatural
        """
        if self._configuration.client_side_validation and flat_taker_fee is None:
            raise ValueError("Invalid value for `flat_taker_fee`, must not be `None`")  # noqa: E501

        self._flat_taker_fee = flat_taker_fee

    @property
    def percentage_maker_fee(self):
        """Gets the percentage_maker_fee of this TradingFees.  # noqa: E501


        :return: The percentage_maker_fee of this TradingFees.  # noqa: E501
        :rtype: str
        """
        return self._percentage_maker_fee

    @percentage_maker_fee.setter
    def percentage_maker_fee(self, percentage_maker_fee):
        """Sets the percentage_maker_fee of this TradingFees.


        :param percentage_maker_fee: The percentage_maker_fee of this TradingFees.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and percentage_maker_fee is None:
            raise ValueError("Invalid value for `percentage_maker_fee`, must not be `None`")  # noqa: E501

        self._percentage_maker_fee = percentage_maker_fee

    @property
    def percentage_taker_fee(self):
        """Gets the percentage_taker_fee of this TradingFees.  # noqa: E501


        :return: The percentage_taker_fee of this TradingFees.  # noqa: E501
        :rtype: str
        """
        return self._percentage_taker_fee

    @percentage_taker_fee.setter
    def percentage_taker_fee(self, percentage_taker_fee):
        """Sets the percentage_taker_fee of this TradingFees.


        :param percentage_taker_fee: The percentage_taker_fee of this TradingFees.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and percentage_taker_fee is None:
            raise ValueError("Invalid value for `percentage_taker_fee`, must not be `None`")  # noqa: E501

        self._percentage_taker_fee = percentage_taker_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradingFees, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradingFees):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TradingFees):
            return True

        return self.to_dict() != other.to_dict()
