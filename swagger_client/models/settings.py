# coding: utf-8

"""
    Genius Yield DEX Server API

    API to interact with GeniusYield DEX.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Settings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backend': 'str',
        'network': 'str',
        'revision': 'str',
        'version': 'str'
    }

    attribute_map = {
        'backend': 'backend',
        'network': 'network',
        'revision': 'revision',
        'version': 'version'
    }

    def __init__(self, backend=None, network=None, revision=None, version=None, _configuration=None):  # noqa: E501
        """Settings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._backend = None
        self._network = None
        self._revision = None
        self._version = None
        self.discriminator = None

        self.backend = backend
        self.network = network
        self.revision = revision
        self.version = version

    @property
    def backend(self):
        """Gets the backend of this Settings.  # noqa: E501


        :return: The backend of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this Settings.


        :param backend: The backend of this Settings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and backend is None:
            raise ValueError("Invalid value for `backend`, must not be `None`")  # noqa: E501

        self._backend = backend

    @property
    def network(self):
        """Gets the network of this Settings.  # noqa: E501


        :return: The network of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Settings.


        :param network: The network of this Settings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def revision(self):
        """Gets the revision of this Settings.  # noqa: E501


        :return: The revision of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Settings.


        :param revision: The revision of this Settings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and revision is None:
            raise ValueError("Invalid value for `revision`, must not be `None`")  # noqa: E501

        self._revision = revision

    @property
    def version(self):
        """Gets the version of this Settings.  # noqa: E501


        :return: The version of this Settings.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Settings.


        :param version: The version of this Settings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Settings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Settings):
            return True

        return self.to_dict() != other.to_dict()
