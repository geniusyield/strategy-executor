# coding: utf-8

"""
    GeniusYield DEX Server API

    API to interact with GeniusYield DEX.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@geniusyield.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AssetDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'GYAssetClass',
        'asset_decimals': 'AssetDecimals',
        'asset_ticker': 'AssetTicker'
    }

    attribute_map = {
        'asset': 'asset',
        'asset_decimals': 'asset_decimals',
        'asset_ticker': 'asset_ticker'
    }

    def __init__(self, asset=None, asset_decimals=None, asset_ticker=None, _configuration=None):  # noqa: E501
        """AssetDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset = None
        self._asset_decimals = None
        self._asset_ticker = None
        self.discriminator = None

        self.asset = asset
        if asset_decimals is not None:
            self.asset_decimals = asset_decimals
        if asset_ticker is not None:
            self.asset_ticker = asset_ticker

    @property
    def asset(self):
        """Gets the asset of this AssetDetails.  # noqa: E501


        :return: The asset of this AssetDetails.  # noqa: E501
        :rtype: GYAssetClass
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this AssetDetails.


        :param asset: The asset of this AssetDetails.  # noqa: E501
        :type: GYAssetClass
        """
        if self._configuration.client_side_validation and asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def asset_decimals(self):
        """Gets the asset_decimals of this AssetDetails.  # noqa: E501


        :return: The asset_decimals of this AssetDetails.  # noqa: E501
        :rtype: AssetDecimals
        """
        return self._asset_decimals

    @asset_decimals.setter
    def asset_decimals(self, asset_decimals):
        """Sets the asset_decimals of this AssetDetails.


        :param asset_decimals: The asset_decimals of this AssetDetails.  # noqa: E501
        :type: AssetDecimals
        """

        self._asset_decimals = asset_decimals

    @property
    def asset_ticker(self):
        """Gets the asset_ticker of this AssetDetails.  # noqa: E501


        :return: The asset_ticker of this AssetDetails.  # noqa: E501
        :rtype: AssetTicker
        """
        return self._asset_ticker

    @asset_ticker.setter
    def asset_ticker(self, asset_ticker):
        """Sets the asset_ticker of this AssetDetails.


        :param asset_ticker: The asset_ticker of this AssetDetails.  # noqa: E501
        :type: AssetTicker
        """

        self._asset_ticker = asset_ticker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetDetails):
            return True

        return self.to_dict() != other.to_dict()
