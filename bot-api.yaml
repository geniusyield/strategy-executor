openapi: '3.1.0'
info:
  title: Genius Yield Trading Bot API
  description: Open API Specification of the Genius Yield Trading Bot API for external trading strategy implementation integration.
  version: '0.0.1'
  license:
    name: Apache License 2.0
    identifier: Apache-2.0
  contact:
    name: Genius Yield Technical Support
    url: https://www.geniusyield.co/
    email: support@geniusyield.co
servers:
  - url: https://{backendServerUrl}/api/{apiVersion}
    description: Trading Bot API backend with environment and version
    variables:
      backendServerUrl:
        default: localhost
        description: The URI of the Trading Bot API backend.
      apiVersion:
        default: v0
        description: API version number
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: api-key
      description: API key to access the Trading Bot API.
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              minimum: 0
              maximum: 9999
              format: int32
              description: Numeric error code indicating the type of error.
            instance:
              type: string
              description: Unique identifier of the indicent instance (used for troubleshooting).
            message:
              type: string
              description: Human-readable message providing more details about the error.
            details:
              type: array
              items:
                type: string
              description: Optional array of detailed error messages or information.
      required: [code, message]
    Settings:
      type: object
      properties: {
          network: { type: string, enum: ["preprod", "mainnet"], examples: ["mainnet", "preprod"] },
          version: { type: string, examples: ["1.0.2"], pattern: "[0-9].[0-9].[0-9]" },
          revision: { type: string, examples: ["c7cc91eec7f3d50b8de196a01034b0cc7097ae59"] },
          backend: { type: string, enum: ["mmb"]},
          address: { type: string, examples: ["addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f"] },
          collateral_utxo: { type: string, examples: ["33be2c9754bb3c2ea32039722cff2e34cva09d746283ab1234ce7155866e3d30#3"] }
        }
      required: [network, version, revision, backend]
      optional: [address, collateral_utxo]
      examples:
      - { network: "mainnet", version: "0.1.0", revision: "c7cc91eec7f3d50b8de196a01034b0cc7097ae59", backend: "mmb", address: "addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f", collateral_utxo: "33be2c9754bb3c2ea32039722cff2e34cva09d746283ab1234ce7155866e3d30#3" }
      - { network: "preprod", version: "0.1.0", revision: "c7cc91eec7f3d50b8de196a01034b0cc7097ae59", backend: "mmb", address: "addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f", collateral_utxo: "33be2c9754bb3c2ea32039722cff2e34cva09d746283ab1234ce7155866e3d30#3" }
    Fees:
      type: object
      properties: {
          flat_maker_fee: { type: number, format: double, minimum: 0 },
          flat_taker_fee: { type: number, format: double, minimum: 0 },
          percentage_maker_fee: { type: number, format: double, minimum: 0, maximum: 100  },
          percentage_taker_fee: { type: number, format: double, minimum: 0, maximum: 100  }
        }
      required: [flat_maker_fee, flat_taker_fee, percentage_maker_fee, percentage_taker_fee]
      examples:
      - { flat_maker_fee: "1.2", flat_taker_fee: "2.3", percentage_maker_fee: "0.75", percentage_taker_fee: "1.25" }
    Market:
      type: object
      properties:
        market_id: { type: string, description: "Identifier of a market with concatenated asset IDs with underscore delimiter to separate base and target.", examples: ["lovelace_dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"] }
        base_asset: { type: string, description: "Identifier of the base asset", examples: ["lovelace", "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"],  }
        target_asset: { type: string, description: "Identifier of the target asset", examples: ["dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"] }
      required: [market_id, base_asset, target_asset]
      examples:
      - {
          market_id: "lovelace_dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53",
          base_asset: "lovelace",
          target_asset: "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"
        }
    Markets:
      type: array
      items: {$ref: '#/components/schemas/Market'}
    Asset:
      type: object
      properties:
        asset: { type: string, description: "Identifier of the asset", examples: ["lovelace", "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"] }
        asset_ticker: { type: string, description: "Ticker of the cryptoasset.", examples: ["ADA", "GENS"] }
        asset_decimals: { type: integer, format: int32, minimum: 0, examples: [0, 6] }
      required: [asset, asset_ticker, asset_decimals]
      examples:
      - {
          asset: "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53",
          asset_ticker: "GENS",
          asset_decimals: 6
        }
      - {
          asset: "lovelace",
          asset_ticker: "ADA",
          asset_decimals: 6
        }
    Balances:
      examples:
      - {
          lovalace: "1",
          dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53: "2"
        }
    Order:
      properties:
        base_asset: {type: string, description: "The base cryptoasset", examples: ["lovelace"] }
        base_amount: {type: string, format: integer, description: "Transaction amount in base pair volume in indivisible units", examples: ["6000000"] }
        target_asset: {type: string, description: "The the target cryptoasset", examples: ["dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"] }
        target_amount: { type: string, format: integer, description: "Transaction amount in target pair volume  in indivisible units." }
        type: { type: string, enum: ["buy", "sell"], examples: ["buy"] }
        valid_from: {type: string, format: date-time, examples: ["1985-04-12T23:00:00.00Z"] }
        valid_until: {type: string, format: date-time, examples: ["1985-04-12T23:15:00.00Z"] }
      required: [base_asset, base_amount, target_asset, target_amount, type]
      examples:
      - {
          base_asset : "lovelace",
          base_amount : "4000000",
          target_asset: "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53",
          target_amount : "1000000",
          type : "buy"
        }
      - {
          base_asset : "lovelace",
          base_amount : "4000000",
          target_asset: "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53",
          target_amount : "1000000",
          type : "buy",
          valid_from: "2024-04-12T23:00:00.00Z",
          valid_until: "2024-04-13T23:00:00.00Z",
        }
    PostOrderParameters:
      type: object
      properties:
        offer_amount: {type: string, examples: ["1"] }
        offer_token: {type: string, examples: ["lovelace"]  }
        price_amount: {type: string, examples: ["1"]}
        price_token: { type: string, examples: ["66a524d7f34d954a3ad30b4e2d08023c950dfcd53bbe3c2314995da6.744d454c44"]}   
        address: {type: string, examples: ["addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f"]}
    PostOrderResponse:
      type: object
      properties:
        transaction: {type: string, examples: ["hexa"] }
        transaction_id: {type: string, examples: ["lovelace"] }
        order_ref: {type: string, examples: ["lovelace"] }
        transaction_fee: {type: string, examples: ["1"]}
        maker_lovelace_flat_fee: {type: string, examples: ["1"]}
        maker_offered_percent_fee: {type: string, examples: ["0.3"]}
        maker_offered_percent_fee_amount: {type: string, examples: ["1"]}
        lovelace_deposit: {type: string, examples: ["1"]}
    DeleteOrderParameters:
      type: object
      properties:
        address: {type: string, examples: ["addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f"]}
        order_references: {type: array, items: {type: string}, examples: [["addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f"]]}
    DeleteOrderResponse:
      type: object
      properties:
        transaction: {type: string, examples: ["hexa"] }
        transaction_id: {type: string, examples: ["lovelace"]  }
        transaction_fee: {type: string, examples: ["1"]}
    BuildTxRequestBase:
      type: object
      properties:
        collateral_utxo: {type: string, examples: ["33be2c9754bb3c2ea32039722cff2e34cva09d746283ab1234ce7155866e3d30#3"]}
        address: {type: string, examples: ["addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f"]}
    BuildPlaceOrdersTxRequest:
      allOf:
        - $ref: '#/components/schemas/BuildTxRequestBase'
        - type: object
          properties:
            orders: {type: array, items: {$ref: '#/components/schemas/Order'}}
          required: [orders]
    Orders:
      type: array
      items: {$ref: '#/components/schemas/Order'}
    BuildTxRequestBase:
      type: object
      properties:
        collateral_utxo: {type: string, examples: ["33be2c9754bb3c2ea32039722cff2e34cva09d746283ab1234ce7155866e3d30#3"]}
        address: {type: string, examples: ["addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f"]}
    BuildPlaceOrdersTxRequest:
      allOf:
        - $ref: '#/components/schemas/BuildTxRequestBase'
        - type: object
          properties:
            orders: {type: array, items: {$ref: '#/components/schemas/Order'}}
          required: [orders]
    BuildCancelOrdersTxRequest:
      allOf:
        - $ref: '#/components/schemas/BuildTxRequestBase'
        - type: object
          properties:
            orders: {type: array, items: {type: string, description: "orders to be cancelled"}}
          required: [orders]
    Transaction:
      type: object
      properties:
        cbor_hex: {type: string}
    SubmitTransactionResponse:
      type: object
      properties:
        transaction_id: {type: string}
        message: {type: string}
        fees: {type: string, format: numeric}
        flat_fees: {type: string, format: numeric}
        offer_fee_percent: {type: string, format: numeric}
        offer_fee_amount: {type: string, format: numeric}
        deposit: {type: string, format: numeric}
      required: [transaction_id, message, fees, flat_fees, offer_fee_percent, offer_fee_percent, offer_fee_amount, deposit]
    Trade:
      type: object
      properties:
        timestamp: { type: string , description: Trade timestamp, format: "date-time", examples: ["1985-04-12T23:00:00.00Z"] }
        base_asset: {type: string, description: "The base cryptoasset", examples: ["lovelace"] }
        base_asset_amount: { type: string, format: integer, description: "Transaction amount in base pair volume in indivisible units." }
        target_asset: {type: string, description: "The the target cryptoasset", examples: ["dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"] }
        target_asset_amount: { type: string, format: integer, description: "Transaction amount in target pair volume in indivisible units." }
        type: { type: string, description: "Used to determine the type of the transaction that was completed. Buy: Identifies an ask that was removed from the order book. Sell: Identifies a bid that was removed from the order book." }
      required: [timestamp, base_asset, base_asset_amount, target_asset, target_asset_amount, type]
    Trades:
      type: array
      items: {$ref: '#/components/schemas/Trade'}
      examples:
      - [
         { "timestamp":"1700050000", "base_asset":"lovelace", "base_asset_amount" : "1000000", "target_asset":"dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53", "target_asset_amount" : "2000000", type: "buy"},
         { "timestamp":"1700050000", "base_asset":"lovelace", "base_asset_amount" : "1000000", "target_asset":"dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53", "target_asset_amount" : "5000000", type: "sell"},
        ]
    Price:
      type: object
      properties:
        base_close: { type: string, format: numeric, description: Base close price. }
        base_high: { type: string, format: numeric, description: Target high price }
        base_low: { type: string, format: numeric, description: Base low price }
        base_open: { type: string, format: numeric, description: Base open price. }
        base_volume: {type: string, format: numeric, description: Base volume in indivisible units. }
        target_close: { type: string, format: numeric, description: Target close price }
        target_high: { type: string, format: numeric, description: Target high price. }
        target_low: { type: string, format: numeric, description: Target low price.  }
        target_open: { type: string, format: numeric, description: Target open price. }
        target_volume: { type: string, format: numeric, description: Base volume in indivisible units. }
        count: { type: integer, description: Candlestick size }
        time_period_start: { type: string , description: "Timestamp of the start of the time period", format: "date-time", examples: ["1985-04-12T23:00:00.00Z"] }
        time_period_end: { type: string , description: "Timestamp of the end of the time period", format: "date-time", examples: ["1985-04-12T23:15:00.00Z"] }
      required: [base_close, base_high, base_low, base_open, base_volume, target_close, target_high, target_low, target_open, target_volume, count, time_period_start, time_period_end]
    Prices:
      type: array
      items: {$ref: '#/components/schemas/Price'}
    OrderInfo:
      type: object
      properties:
        offer_amount: { type: string }
        output_reference: { type: string }
        owner_address: { type: string }
        owner_key_hash: { type: string }
        price: { type: string }
        start: { type: string, format: ISO8601}
        end: { type: string, format: ISO8601}
      required:
      - offer_amount
      - price
      - owner_address
      - owner_key_hash
      - output_reference
    OrderBookInfo:
      type: object
      properties:
        market_pair_id: {type: string}
        timestamp: {type: string }
        asks:
          type: array
          items: { $ref: '#/components/schemas/OrderInfo' }
        bids:
          type: array
          items: { $ref: '#/components/schemas/OrderInfo' }
      required:
      - market_pair_id
      - timestamp
      - bids
      - asks
    MarketOHLC:
      type: object
      example:
        base_close: 0.207742
        base_high: 0.207742
        base_low: 0.207742
        base_open: 0.207742
        base_volume: 25.21128
        count: 1
        target_close: 4.813658
        target_high: 4.813658
        target_low: 4.813658
        target_open: 4.813658
        target_volume: 121.358488
        timestamp: 2024-03-07T23:45:00Z
      properties:
        base_close:
          format: double
          type: number
        base_high:
          format: double
          type: number
        base_low:
          format: double
          type: number
        base_open:
          format: double
          type: number
        base_volume:
          format: double
          type: number
        count:
          exclusiveMinimum: false
          minimum: 0
          type: integer
        target_close:
          format: double
          type: number
        target_high:
          format: double
          type: number
        target_low:
          format: double
          type: number
        target_open:
          format: double
          type: number
        target_volume:
          format: double
          type: number
        timestamp:
          description: This is the posix time in ISO8601 format.
          example: 1970-01-01T00:00:00Z
          format: ISO8601
          type: string
      required:
      - base_close
      - base_high
      - base_low
      - base_open
      - base_volume
      - target_close
      - target_high
      - target_low
      - target_open
      - target_volume
      - count
      - timestamp

security:
  - ApiKeyAuth: [read, write]
tags:
  - name: settings
    description: Endpoints to access configuration settings and Trading Bot API backend metadata.
  - name: assets
    description: Endpoints to access the details of the available assets.
  - name: markets
    description: Endpoints to access the details of the trading pairs available via the Trading Bot API.
  - name: balances
    description: Endpoints to access the asset balances available for the trading bot.
  - name: orders
    description: Endpoints to access the orderbook(s), place new orders or cancel existing orders.
  - name: trades
    description: Endpoints to access historical trades.
  - name: prices
    description: Endpoints to access historical prices.
  - name: tx
    description: "Endpoints enabling working with transactions, and provides support for tasks like; building, signing and submitting transactions."
paths:
  /settings:
    get:
      tags: [settings]
      description: Fetch the configuration and metadata.
      responses:
        "200": {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Settings' }}}}
        "400": {description: Bad Request, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "401": {description: Anauthorized access, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "500": {description: Internal Server Error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /assets/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the asset to retrieve
          schema:
            type: string
      tags: [assets]
      description: Fetch the assets.
      responses:
        "200": {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Asset' }}}}
        "400": {description: Bad Request, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "401": {description: Anauthorized access, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "500": {description: Internal Server Error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /markets:
    get:
      tags: [markets]
      description: Get the trading pairs available for trading.
      responses:
        "200": {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Markets' }}}}
        "400": {description: Bad Request, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "401": {description: Anauthorized access, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "500": {description: Internal Server Error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /balances/{address}:
    get:
      tags: [balances]
      description: Get available trading bot balances.
      parameters:
      - name: address
        in: path
        required: true
        schema:
          type: string
      responses:
        "200": {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Balances' }}}}
        "400": {description: Bad Request, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "401": {description: Anauthorized access, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "501": {description: Internal Server Error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /orders:
    post:
      tags: [orders]
      description: Create new orders.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOrderParameters'
      responses:
        "200": {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/PostOrderResponse' }}}}
        "400": {description: Bad Request, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "401": {description: Anauthorized access, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "501": {description: Internal Server Error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
    delete:
      tags: [orders]
      description: Cancel existing orders.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOrderParameters'
      responses:
        "200":
          description: Canceled on-chain orders.
          content: { application/json: { schema: { $ref: '#/components/schemas/DeleteOrderResponse'}}}
  /order-books/{market_id}:
    get:
      tags: [orders]
      parameters:
        - name: market_id
          in: path
          required: true
          description: The ID of the market to retrieve the orderbook for.
          schema: {type: string}
        - in: query
          name: "address"
          schema: {type: string}
          required: false
      description: Get order book for a specific market.
      produces:
      - application/json;charset=utf-8
      responses:
        "200": {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/OrderBookInfo' }}}}
        '400':
          description: Invalid `address` or `market-id`
        '401':
          description: Unauthorized access - API key missing
        '403':
          description: Forbidden - The API key does not have permission to perform
            the request
        '500':
          description: Internal server error
  /historical-prices/maestro/{market}/{dex}:
    get:
      description: This endpoint internally calls Maestro's "DEX And Pair OHLC" endpoint.
      parameters:
      - in: path
        name: market
        required: true
        schema: {type: string}
      - name: dex
        in: path
        required: true
        schema: {type: string}
      - name: resolution
        in: query
        required: false
        schema: {type: string}
      - name: from
        format: date
        in: query
        required: false
        schema: {type: string}
      - name: to
        in: query
        schema: {type: string}
        required: false
      - name: limit
        in: query
        required: false
        schema: {type: number}
      - name: sort
        in: query
        required: false
        schema: {type: string}
      produces:
      - application/json;charset=utf-8
      responses:
        "200": {description: Success, content: {application/json: {schema: {type: array, items: {$ref: '#/components/schemas/MarketOHLC'} }}}}
        '400':
          description: Invalid `sort` or `limit` or `to` or `from` or `resolution`
            or `dex` or `market-id`
        '401':
          description: Unauthorized access - API key missing
        '403':
          description: Forbidden - The API key does not have permission to perform
            the request
        '500':
          description: Internal server error
      security:
      - api-key: []
      summary: Get price history using Maestro.
      tags:
      - Historical Prices
  /trading-fees:
    get:
      tags: [fees]
      description: Fetch the current trading fees.
      responses:
        "200": {description: Success, content: {application/json: {schema: {$ref: '#/components/schemas/Fees' }}}}
        "400": {description: Bad Request, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "401": {description: Anauthorized access, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        "501": {description: Internal Server Error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}