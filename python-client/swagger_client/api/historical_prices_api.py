# coding: utf-8

"""
    Genius Yield DEX Server API

    API to interact with GeniusYield DEX.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class HistoricalPricesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v0_historical_prices_maestro_market_id_dex_get(self, market_id, dex, **kwargs):  # noqa: E501
        """Get price history using Maestro.  # noqa: E501

        This endpoint internally calls Maestro's \"DEX And Pair OHLC\" endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v0_historical_prices_maestro_market_id_dex_get(market_id, dex, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market_id: (required)
        :param str dex: (required)
        :param str resolution:
        :param date _from:
        :param date to:
        :param int limit:
        :param str sort:
        :return: list[MarketOHLC]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v0_historical_prices_maestro_market_id_dex_get_with_http_info(market_id, dex, **kwargs)  # noqa: E501
        else:
            (data) = self.v0_historical_prices_maestro_market_id_dex_get_with_http_info(market_id, dex, **kwargs)  # noqa: E501
            return data

    def v0_historical_prices_maestro_market_id_dex_get_with_http_info(self, market_id, dex, **kwargs):  # noqa: E501
        """Get price history using Maestro.  # noqa: E501

        This endpoint internally calls Maestro's \"DEX And Pair OHLC\" endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v0_historical_prices_maestro_market_id_dex_get_with_http_info(market_id, dex, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market_id: (required)
        :param str dex: (required)
        :param str resolution:
        :param date _from:
        :param date to:
        :param int limit:
        :param str sort:
        :return: list[MarketOHLC]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market_id', 'dex', 'resolution', '_from', 'to', 'limit', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v0_historical_prices_maestro_market_id_dex_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'market_id' is set
        if self.api_client.client_side_validation and ('market_id' not in params or
                                                       params['market_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `market_id` when calling `v0_historical_prices_maestro_market_id_dex_get`")  # noqa: E501
        # verify the required parameter 'dex' is set
        if self.api_client.client_side_validation and ('dex' not in params or
                                                       params['dex'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dex` when calling `v0_historical_prices_maestro_market_id_dex_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 50000):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `v0_historical_prices_maestro_market_id_dex_get`, must be a value less than or equal to `50000`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `v0_historical_prices_maestro_market_id_dex_get`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'market_id' in params:
            path_params['market-id'] = params['market_id']  # noqa: E501
        if 'dex' in params:
            path_params['dex'] = params['dex']  # noqa: E501

        query_params = []
        if 'resolution' in params:
            query_params.append(('resolution', params['resolution']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/v0/historical-prices/maestro/{market-id}/{dex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarketOHLC]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
