# coding: utf-8

"""
    Genius Yield DEX Server API

    API to interact with GeniusYield DEX.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MarketOHLC(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_close': 'float',
        'base_high': 'float',
        'base_low': 'float',
        'base_open': 'float',
        'base_volume': 'float',
        'count': 'int',
        'target_close': 'float',
        'target_high': 'float',
        'target_low': 'float',
        'target_open': 'float',
        'target_volume': 'float',
        'timestamp': 'str'
    }

    attribute_map = {
        'base_close': 'base_close',
        'base_high': 'base_high',
        'base_low': 'base_low',
        'base_open': 'base_open',
        'base_volume': 'base_volume',
        'count': 'count',
        'target_close': 'target_close',
        'target_high': 'target_high',
        'target_low': 'target_low',
        'target_open': 'target_open',
        'target_volume': 'target_volume',
        'timestamp': 'timestamp'
    }

    def __init__(self, base_close=None, base_high=None, base_low=None, base_open=None, base_volume=None, count=None, target_close=None, target_high=None, target_low=None, target_open=None, target_volume=None, timestamp=None, _configuration=None):  # noqa: E501
        """MarketOHLC - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._base_close = None
        self._base_high = None
        self._base_low = None
        self._base_open = None
        self._base_volume = None
        self._count = None
        self._target_close = None
        self._target_high = None
        self._target_low = None
        self._target_open = None
        self._target_volume = None
        self._timestamp = None
        self.discriminator = None

        self.base_close = base_close
        self.base_high = base_high
        self.base_low = base_low
        self.base_open = base_open
        self.base_volume = base_volume
        self.count = count
        self.target_close = target_close
        self.target_high = target_high
        self.target_low = target_low
        self.target_open = target_open
        self.target_volume = target_volume
        self.timestamp = timestamp

    @property
    def base_close(self):
        """Gets the base_close of this MarketOHLC.  # noqa: E501


        :return: The base_close of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._base_close

    @base_close.setter
    def base_close(self, base_close):
        """Sets the base_close of this MarketOHLC.


        :param base_close: The base_close of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and base_close is None:
            raise ValueError("Invalid value for `base_close`, must not be `None`")  # noqa: E501

        self._base_close = base_close

    @property
    def base_high(self):
        """Gets the base_high of this MarketOHLC.  # noqa: E501


        :return: The base_high of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._base_high

    @base_high.setter
    def base_high(self, base_high):
        """Sets the base_high of this MarketOHLC.


        :param base_high: The base_high of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and base_high is None:
            raise ValueError("Invalid value for `base_high`, must not be `None`")  # noqa: E501

        self._base_high = base_high

    @property
    def base_low(self):
        """Gets the base_low of this MarketOHLC.  # noqa: E501


        :return: The base_low of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._base_low

    @base_low.setter
    def base_low(self, base_low):
        """Sets the base_low of this MarketOHLC.


        :param base_low: The base_low of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and base_low is None:
            raise ValueError("Invalid value for `base_low`, must not be `None`")  # noqa: E501

        self._base_low = base_low

    @property
    def base_open(self):
        """Gets the base_open of this MarketOHLC.  # noqa: E501


        :return: The base_open of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._base_open

    @base_open.setter
    def base_open(self, base_open):
        """Sets the base_open of this MarketOHLC.


        :param base_open: The base_open of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and base_open is None:
            raise ValueError("Invalid value for `base_open`, must not be `None`")  # noqa: E501

        self._base_open = base_open

    @property
    def base_volume(self):
        """Gets the base_volume of this MarketOHLC.  # noqa: E501


        :return: The base_volume of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._base_volume

    @base_volume.setter
    def base_volume(self, base_volume):
        """Sets the base_volume of this MarketOHLC.


        :param base_volume: The base_volume of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and base_volume is None:
            raise ValueError("Invalid value for `base_volume`, must not be `None`")  # noqa: E501

        self._base_volume = base_volume

    @property
    def count(self):
        """Gets the count of this MarketOHLC.  # noqa: E501


        :return: The count of this MarketOHLC.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this MarketOHLC.


        :param count: The count of this MarketOHLC.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                count is not None and count < 0):  # noqa: E501
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._count = count

    @property
    def target_close(self):
        """Gets the target_close of this MarketOHLC.  # noqa: E501


        :return: The target_close of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._target_close

    @target_close.setter
    def target_close(self, target_close):
        """Sets the target_close of this MarketOHLC.


        :param target_close: The target_close of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and target_close is None:
            raise ValueError("Invalid value for `target_close`, must not be `None`")  # noqa: E501

        self._target_close = target_close

    @property
    def target_high(self):
        """Gets the target_high of this MarketOHLC.  # noqa: E501


        :return: The target_high of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._target_high

    @target_high.setter
    def target_high(self, target_high):
        """Sets the target_high of this MarketOHLC.


        :param target_high: The target_high of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and target_high is None:
            raise ValueError("Invalid value for `target_high`, must not be `None`")  # noqa: E501

        self._target_high = target_high

    @property
    def target_low(self):
        """Gets the target_low of this MarketOHLC.  # noqa: E501


        :return: The target_low of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._target_low

    @target_low.setter
    def target_low(self, target_low):
        """Sets the target_low of this MarketOHLC.


        :param target_low: The target_low of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and target_low is None:
            raise ValueError("Invalid value for `target_low`, must not be `None`")  # noqa: E501

        self._target_low = target_low

    @property
    def target_open(self):
        """Gets the target_open of this MarketOHLC.  # noqa: E501


        :return: The target_open of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._target_open

    @target_open.setter
    def target_open(self, target_open):
        """Sets the target_open of this MarketOHLC.


        :param target_open: The target_open of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and target_open is None:
            raise ValueError("Invalid value for `target_open`, must not be `None`")  # noqa: E501

        self._target_open = target_open

    @property
    def target_volume(self):
        """Gets the target_volume of this MarketOHLC.  # noqa: E501


        :return: The target_volume of this MarketOHLC.  # noqa: E501
        :rtype: float
        """
        return self._target_volume

    @target_volume.setter
    def target_volume(self, target_volume):
        """Sets the target_volume of this MarketOHLC.


        :param target_volume: The target_volume of this MarketOHLC.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and target_volume is None:
            raise ValueError("Invalid value for `target_volume`, must not be `None`")  # noqa: E501

        self._target_volume = target_volume

    @property
    def timestamp(self):
        """Gets the timestamp of this MarketOHLC.  # noqa: E501

        This is the posix time in ISO8601 format.  # noqa: E501

        :return: The timestamp of this MarketOHLC.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MarketOHLC.

        This is the posix time in ISO8601 format.  # noqa: E501

        :param timestamp: The timestamp of this MarketOHLC.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketOHLC, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketOHLC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarketOHLC):
            return True

        return self.to_dict() != other.to_dict()
